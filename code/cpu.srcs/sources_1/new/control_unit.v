module control_unit (
    input sys_rst_n,

    input [2:0] command_counter_encode,
    input [7:0] command_reg_data,

    input alu_full,
    input alu_empty,

    output clock_halt_en,//

    output a_reg_in_en,//
    output a_reg_out_en,//
    output b_reg_in_en,//
    output b_reg_out_en,//
    output alu_out_en,//
    output alu_sub_en,//

    output pc_load,//
    output pc_en,//
    output pc_out_en,//

    output command_reg_in_en,//
    output command_reg_out_en,//

    output ram_address_lock_en,//
    output ram_data_in_en,//
    output ram_data_out_en,//

    output display_smg_in_en,//
    output alu_flag_in_en
);

reg [0:16] all_command [511:0];
wire [8:0] all_command_address;
// assign alu_full=1'b0;//!!!!
// assign alu_empty=1'b0;//!!!!
assign all_command_address={alu_full,alu_empty,command_reg_data[7:4],command_counter_encode};
assign {clock_halt_en,ram_address_lock_en,ram_data_in_en,ram_data_out_en,command_reg_out_en,command_reg_in_en,a_reg_in_en,a_reg_out_en,alu_out_en,alu_sub_en,b_reg_in_en,b_reg_out_en,display_smg_in_en,pc_en,pc_out_en,pc_load,alu_flag_in_en}=all_command[all_command_address];
// assign {clock_halt_en,ram_address_lock_en,ram_data_in_en,ram_data_out_en,command_reg_out_en,command_reg_in_en,a_reg_in_en,a_reg_out_en,alu_out_en,alu_sub_en,b_reg_in_en,b_reg_out_en,display_smg_in_en,pc_en,pc_out_en,pc_load,alu_flag_in_en}=17'b0000_0000_0000_0000_0;
initial begin
// always @(negedge sys_rst_n) begin

    //0000-NOP 空等待
    //0001-LDA 把指令低四位作为指定内存地址的内容放入A寄存器
    //0010-ADD 把指令低四位作为指定内存地址的内容与A寄存器的数值相加，结果覆写A寄存器
    //0011-SUB 把指令低四位作为指定内存地址的内容与A寄存器的数值相减，结果覆写A寄存器
    //0100-STA 把A寄存器的内容存入指令低四位作为指定内存地址
    //0101-LDI 把指令低四位的内容放入A寄存器
    //0110-JMP 把指令低四位的内容作为程序下一次跳转到的地址
    //0111-JZ  ALU内容为0时跳转到指令低四位指向的内存地址，否则不工作
    //1000-JF  ALU内容为满时跳转到指令低四位指向的内存地址，否则不工作
    //1110-OUT 把A寄存器的结果存到输出寄存器
    //1111-HLT 停机

    //clock_halt_en  ram_address_lock_en  ram_data_in_en  ram_data_out_en   command_reg_out_en  command_reg_in_en   a_reg_in_en   a_reg_out_en
    //alu_out_en     alu_sub_en           b_reg_in_en     b_reg_out_en      display_smg_in_en   pc_en               pc_out_en     pc_load       alu_flag_in_en

    //JF=0,JZ=0--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    //0000-NOP 空等待
    //停机     内存地址输入  内存数据输入  内存数据输出 |  指令寄存器输出  指令寄存器输入   A寄存器输入    A寄存器输出
    //ALU输出  减法         B寄存器输入   B寄存器输出  |  输出寄存器输入  程序计数允许    程序计数器输出  程序计数器输入（JUMP） ALU的flag寄存器更新
    all_command[9'b00_0000_000]<=17'b0100_0000_0000_0010_0;//内存地址输入 程序计数器输出
    all_command[9'b00_0000_001]<=17'b0001_0100_0000_0100_0;//内存数据输出 指令寄存器输入 程序计数允许
    all_command[9'b00_0000_010]<=17'b0000_0000_0000_0000_0;
    all_command[9'b00_0000_011]<=17'b0000_0000_0000_0000_0;
    all_command[9'b00_0000_100]<=17'b0000_0000_0000_0000_0;
    all_command[9'b00_0000_101]<=17'b0000_0000_0000_0000_0;
    all_command[9'b00_0000_110]<=17'b0000_0000_0000_0000_0;
    all_command[9'b00_0000_111]<=17'b0000_0000_0000_0000_0;

    //0001-LDA 把指令低四位作为指定内存地址的内容放入A寄存器
    //停机     内存地址输入  内存数据输入  内存数据输出 |  指令寄存器输出  指令寄存器输入   A寄存器输入    A寄存器输出
    //ALU输出  减法         B寄存器输入   B寄存器输出  |  输出寄存器输入  程序计数允许    程序计数器输出  程序计数器输入（JUMP） ALU的flag寄存器更新
    all_command[9'b00_0001_000]<=17'b0100_0000_0000_0010_0;//内存地址输入 程序计数器输出
    all_command[9'b00_0001_001]<=17'b0001_0100_0000_0100_0;//内存数据输出 指令寄存器输入 程序计数允许
    all_command[9'b00_0001_010]<=17'b0100_1000_0000_0000_0;//指令寄存器输出 内存地址输入
    all_command[9'b00_0001_011]<=17'b0001_0010_0000_0000_0;//内存数据输出 A寄存器输入
    all_command[9'b00_0001_100]<=17'b0000_0000_0000_0000_0;
    all_command[9'b00_0001_101]<=17'b0000_0000_0000_0000_0;
    all_command[9'b00_0001_110]<=17'b0000_0000_0000_0000_0;
    all_command[9'b00_0001_111]<=17'b0000_0000_0000_0000_0;

    //0010-ADD 把指令低四位作为指定内存地址的内容与A寄存器的数值相加，结果覆写A寄存器
    //停机     内存地址输入  内存数据输入  内存数据输出 |  指令寄存器输出  指令寄存器输入   A寄存器输入    A寄存器输出
    //ALU输出  减法         B寄存器输入   B寄存器输出  |  输出寄存器输入  程序计数允许    程序计数器输出  程序计数器输入（JUMP） ALU的flag寄存器更新
    all_command[9'b00_0010_000]<=17'b0100_0000_0000_0010_0;//内存地址输入 程序计数器输出
    all_command[9'b00_0010_001]<=17'b0001_0100_0000_0100_0;//内存数据输出 指令寄存器输入 程序计数允许
    all_command[9'b00_0010_010]<=17'b0100_1000_0000_0000_0;//指令寄存器输出 内存地址输入
    all_command[9'b00_0010_011]<=17'b0001_0000_0010_0000_0;//内存数据输出 B寄存器输入
    all_command[9'b00_0010_100]<=17'b0000_0010_1000_0000_1;//ALU输出 A寄存器输入 ALU的flag寄存器更新
    all_command[9'b00_0010_101]<=17'b0000_0000_0000_0000_0;
    all_command[9'b00_0010_110]<=17'b0000_0000_0000_0000_0;
    all_command[9'b00_0010_111]<=17'b0000_0000_0000_0000_0;
    
    //0011-SUB 把指令低四位作为指定内存地址的内容与A寄存器的数值相减，结果覆写A寄存器
    //停机     内存地址输入  内存数据输入  内存数据输出 |  指令寄存器输出  指令寄存器输入   A寄存器输入    A寄存器输出
    //ALU输出  减法         B寄存器输入   B寄存器输出  |  输出寄存器输入  程序计数允许    程序计数器输出  程序计数器输入（JUMP） ALU的flag寄存器更新
    all_command[9'b00_0011_000]<=17'b0100_0000_0000_0010_0;//内存地址输入 程序计数器输出
    all_command[9'b00_0011_001]<=17'b0001_0100_0000_0100_0;//内存数据输出 指令寄存器输入 程序计数允许
    all_command[9'b00_0011_010]<=17'b0100_1000_0000_0000_0;//指令寄存器输出 内存地址输入
    all_command[9'b00_0011_011]<=17'b0001_0000_0010_0000_0;//内存数据输出 B寄存器输入
    all_command[9'b00_0011_100]<=17'b0000_0010_1100_0000_1;//ALU输出 A寄存器输入 减法 ALU的flag寄存器更新
    all_command[9'b00_0011_101]<=17'b0000_0000_0000_0000_0;
    all_command[9'b00_0011_110]<=17'b0000_0000_0000_0000_0;
    all_command[9'b00_0011_111]<=17'b0000_0000_0000_0000_0;

    //0100-STA 把A寄存器的内容存入指令低四位作为指定内存地址
    //停机     内存地址输入  内存数据输入  内存数据输出 |  指令寄存器输出  指令寄存器输入   A寄存器输入    A寄存器输出
    //ALU输出  减法         B寄存器输入   B寄存器输出  |  输出寄存器输入  程序计数允许    程序计数器输出  程序计数器输入（JUMP） ALU的flag寄存器更新
    all_command[9'b00_0100_000]<=17'b0100_0000_0000_0010_0;//内存地址输入 程序计数器输出
    all_command[9'b00_0100_001]<=17'b0001_0100_0000_0100_0;//内存数据输出 指令寄存器输入 程序计数允许
    all_command[9'b00_0100_010]<=17'b0100_1000_0000_0000_0;//指令寄存器输出 内存地址输入
    all_command[9'b00_0100_011]<=17'b0010_0001_0000_0000_0;//A寄存器输出 内存数据输入
    all_command[9'b00_0100_100]<=17'b0000_0000_0000_0000_0;
    all_command[9'b00_0100_101]<=17'b0000_0000_0000_0000_0;
    all_command[9'b00_0100_110]<=17'b0000_0000_0000_0000_0;
    all_command[9'b00_0100_111]<=17'b0000_0000_0000_0000_0;

    //0101-LDI 把指令低四位的内容放入A寄存器
    //停机     内存地址输入  内存数据输入  内存数据输出 |  指令寄存器输出  指令寄存器输入   A寄存器输入    A寄存器输出
    //ALU输出  减法         B寄存器输入   B寄存器输出  |  输出寄存器输入  程序计数允许    程序计数器输出  程序计数器输入（JUMP） ALU的flag寄存器更新
    all_command[9'b00_0101_000]<=17'b0100_0000_0000_0010_0;//内存地址输入 程序计数器输出
    all_command[9'b00_0101_001]<=17'b0001_0100_0000_0100_0;//内存数据输出 指令寄存器输入 程序计数允许
    all_command[9'b00_0101_010]<=17'b0000_1010_0000_0000_0;//指令寄存器输出 A寄存器输入
    all_command[9'b00_0101_011]<=17'b0000_0000_0000_0000_0;
    all_command[9'b00_0101_100]<=17'b0000_0000_0000_0000_0;
    all_command[9'b00_0101_101]<=17'b0000_0000_0000_0000_0;
    all_command[9'b00_0101_110]<=17'b0000_0000_0000_0000_0;
    all_command[9'b00_0101_111]<=17'b0000_0000_0000_0000_0;

    //0110-JMP 把指令低四位的内容作为程序下一次跳转到的地址
    //停机     内存地址输入  内存数据输入  内存数据输出 |  指令寄存器输出  指令寄存器输入   A寄存器输入    A寄存器输出
    //ALU输出  减法         B寄存器输入   B寄存器输出  |  输出寄存器输入  程序计数允许    程序计数器输出  程序计数器输入（JUMP） ALU的flag寄存器更新
    all_command[9'b00_0110_000]<=17'b0100_0000_0000_0010_0;//内存地址输入 程序计数器输出
    all_command[9'b00_0110_001]<=17'b0001_0100_0000_0100_0;//内存数据输出 指令寄存器输入 程序计数允许
    all_command[9'b00_0110_010]<=17'b0000_1000_0000_0001_0;//指令寄存器输出 程序计数器输入
    all_command[9'b00_0110_011]<=17'b0000_0000_0000_0000_0;
    all_command[9'b00_0110_100]<=17'b0000_0000_0000_0000_0;
    all_command[9'b00_0110_101]<=17'b0000_0000_0000_0000_0;
    all_command[9'b00_0110_110]<=17'b0000_0000_0000_0000_0;
    all_command[9'b00_0110_111]<=17'b0000_0000_0000_0000_0;

    //0111-JZ ALU内容为0时跳转到指令低四位指向的内存地址，否则不工作
    //停机     内存地址输入  内存数据输入  内存数据输出 |  指令寄存器输出  指令寄存器输入   A寄存器输入    A寄存器输出
    //ALU输出  减法         B寄存器输入   B寄存器输出  |  输出寄存器输入  程序计数允许    程序计数器输出  程序计数器输入（JUMP） ALU的flag寄存器更新
    all_command[9'b00_0111_000]<=17'b0100_0000_0000_0010_0;//内存地址输入 程序计数器输出
    all_command[9'b00_0111_001]<=17'b0001_0100_0000_0100_0;//内存数据输出 指令寄存器输入 程序计数允许
    all_command[9'b00_0111_010]<=17'b0000_0000_0000_0000_0;
    all_command[9'b00_0111_011]<=17'b0000_0000_0000_0000_0;
    all_command[9'b00_0111_100]<=17'b0000_0000_0000_0000_0;
    all_command[9'b00_0111_101]<=17'b0000_0000_0000_0000_0;
    all_command[9'b00_0111_110]<=17'b0000_0000_0000_0000_0;
    all_command[9'b00_0111_111]<=17'b0000_0000_0000_0000_0;

    //1000-JF ALU内容为满时跳转到指令低四位指向的内存地址，否则不工作
    //停机     内存地址输入  内存数据输入  内存数据输出 |  指令寄存器输出  指令寄存器输入   A寄存器输入    A寄存器输出
    //ALU输出  减法         B寄存器输入   B寄存器输出  |  输出寄存器输入  程序计数允许    程序计数器输出  程序计数器输入（JUMP） ALU的flag寄存器更新
    all_command[9'b00_1000_000]<=17'b0100_0000_0000_0010_0;//内存地址输入 程序计数器输出
    all_command[9'b00_1000_001]<=17'b0001_0100_0000_0100_0;//内存数据输出 指令寄存器输入 程序计数允许
    all_command[9'b00_1000_010]<=17'b0000_0000_0000_0000_0;
    all_command[9'b00_1000_011]<=17'b0000_0000_0000_0000_0;
    all_command[9'b00_1000_100]<=17'b0000_0000_0000_0000_0;
    all_command[9'b00_1000_101]<=17'b0000_0000_0000_0000_0;
    all_command[9'b00_1000_110]<=17'b0000_0000_0000_0000_0;
    all_command[9'b00_1000_111]<=17'b0000_0000_0000_0000_0;

    //1001
    all_command[9'b00_1001_000]<=17'b0000_0000_0000_0000_0;
    all_command[9'b00_1001_001]<=17'b0000_0000_0000_0000_0;
    all_command[9'b00_1001_010]<=17'b0000_0000_0000_0000_0;
    all_command[9'b00_1001_011]<=17'b0000_0000_0000_0000_0;
    all_command[9'b00_1001_100]<=17'b0000_0000_0000_0000_0;
    all_command[9'b00_1001_101]<=17'b0000_0000_0000_0000_0;
    all_command[9'b00_1001_110]<=17'b0000_0000_0000_0000_0;
    all_command[9'b00_1001_111]<=17'b0000_0000_0000_0000_0;
    //1010
    all_command[9'b00_1010_000]<=17'b0000_0000_0000_0000_0;
    all_command[9'b00_1010_001]<=17'b0000_0000_0000_0000_0;
    all_command[9'b00_1010_010]<=17'b0000_0000_0000_0000_0;
    all_command[9'b00_1010_011]<=17'b0000_0000_0000_0000_0;
    all_command[9'b00_1010_100]<=17'b0000_0000_0000_0000_0;
    all_command[9'b00_1010_101]<=17'b0000_0000_0000_0000_0;
    all_command[9'b00_1010_110]<=17'b0000_0000_0000_0000_0;
    all_command[9'b00_1010_111]<=17'b0000_0000_0000_0000_0;
    //1011
    all_command[9'b00_1011_000]<=17'b0000_0000_0000_0000_0;
    all_command[9'b00_1011_001]<=17'b0000_0000_0000_0000_0;
    all_command[9'b00_1011_010]<=17'b0000_0000_0000_0000_0;
    all_command[9'b00_1011_011]<=17'b0000_0000_0000_0000_0;
    all_command[9'b00_1011_100]<=17'b0000_0000_0000_0000_0;
    all_command[9'b00_1011_101]<=17'b0000_0000_0000_0000_0;
    all_command[9'b00_1011_110]<=17'b0000_0000_0000_0000_0;
    all_command[9'b00_1011_111]<=17'b0000_0000_0000_0000_0;
    //1100
    all_command[9'b00_1100_000]<=17'b0000_0000_0000_0000_0;
    all_command[9'b00_1100_001]<=17'b0000_0000_0000_0000_0;
    all_command[9'b00_1100_010]<=17'b0000_0000_0000_0000_0;
    all_command[9'b00_1100_011]<=17'b0000_0000_0000_0000_0;
    all_command[9'b00_1100_100]<=17'b0000_0000_0000_0000_0;
    all_command[9'b00_1100_101]<=17'b0000_0000_0000_0000_0;
    all_command[9'b00_1100_110]<=17'b0000_0000_0000_0000_0;
    all_command[9'b00_1100_111]<=17'b0000_0000_0000_0000_0;
    //1101
    all_command[9'b00_1101_000]<=17'b0000_0000_0000_0000_0;
    all_command[9'b00_1101_001]<=17'b0000_0000_0000_0000_0;
    all_command[9'b00_1101_010]<=17'b0000_0000_0000_0000_0;
    all_command[9'b00_1101_011]<=17'b0000_0000_0000_0000_0;
    all_command[9'b00_1101_100]<=17'b0000_0000_0000_0000_0;
    all_command[9'b00_1101_101]<=17'b0000_0000_0000_0000_0;
    all_command[9'b00_1101_110]<=17'b0000_0000_0000_0000_0;
    all_command[9'b00_1101_111]<=17'b0000_0000_0000_0000_0;


    //1110-OUT 把A寄存器的结果存到输出寄存器
    //停机     内存地址输入  内存数据输入  内存数据输出 |  指令寄存器输出  指令寄存器输入   A寄存器输入    A寄存器输出
    //ALU输出  减法         B寄存器输入   B寄存器输出  |  输出寄存器输入  程序计数允许    程序计数器输出  程序计数器输入（JUMP） ALU的flag寄存器更新
    all_command[9'b00_1110_000]<=17'b0100_0000_0000_0010_0;//内存地址输入 程序计数器输出
    all_command[9'b00_1110_001]<=17'b0001_0100_0000_0100_0;//内存数据输出 指令寄存器输入 程序计数允许
    all_command[9'b00_1110_010]<=17'b0000_0001_0000_1000_0;//A寄存器输出 输出寄存器输入
    all_command[9'b00_1110_011]<=17'b0000_0000_0000_0000_0;
    all_command[9'b00_1110_100]<=17'b0000_0000_0000_0000_0;
    all_command[9'b00_1110_101]<=17'b0000_0000_0000_0000_0;
    all_command[9'b00_1110_110]<=17'b0000_0000_0000_0000_0;
    all_command[9'b00_1110_111]<=17'b0000_0000_0000_0000_0;

    //1111-HLT 停机
    //停机     内存地址输入  内存数据输入  内存数据输出 |  指令寄存器输出  指令寄存器输入   A寄存器输入    A寄存器输出
    //ALU输出  减法         B寄存器输入   B寄存器输出  |  输出寄存器输入  程序计数允许    程序计数器输出  程序计数器输入（JUMP） ALU的flag寄存器更新
    all_command[9'b00_1111_000]<=17'b0100_0000_0000_0010_0;//内存地址输入 程序计数器输出
    all_command[9'b00_1111_001]<=17'b0001_0100_0000_0100_0;//内存数据输出 指令寄存器输入 程序计数允许
    all_command[9'b00_1111_010]<=17'b1000_0000_0000_0000_0;//停机
    all_command[9'b00_1111_011]<=17'b0000_0000_0000_0000_0;
    all_command[9'b00_1111_100]<=17'b0000_0000_0000_0000_0;
    all_command[9'b00_1111_101]<=17'b0000_0000_0000_0000_0;
    all_command[9'b00_1111_110]<=17'b0000_0000_0000_0000_0;
    all_command[9'b00_1111_111]<=17'b0000_0000_0000_0000_0;

    //JF=0,JZ=1--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    //0000-NOP 空等待
    //停机     内存地址输入  内存数据输入  内存数据输出 |  指令寄存器输出  指令寄存器输入   A寄存器输入    A寄存器输出
    //ALU输出  减法         B寄存器输入   B寄存器输出  |  输出寄存器输入  程序计数允许    程序计数器输出  程序计数器输入（JUMP） ALU的flag寄存器更新
    all_command[9'b01_0000_000]<=17'b0100_0000_0000_0010_0;//内存地址输入 程序计数器输出
    all_command[9'b01_0000_001]<=17'b0001_0100_0000_0100_0;//内存数据输出 指令寄存器输入 程序计数允许
    all_command[9'b01_0000_010]<=17'b0000_0000_0000_0000_0;
    all_command[9'b01_0000_011]<=17'b0000_0000_0000_0000_0;
    all_command[9'b01_0000_100]<=17'b0000_0000_0000_0000_0;
    all_command[9'b01_0000_101]<=17'b0000_0000_0000_0000_0;
    all_command[9'b01_0000_110]<=17'b0000_0000_0000_0000_0;
    all_command[9'b01_0000_111]<=17'b0000_0000_0000_0000_0;

    //0001-LDA 把指令低四位作为指定内存地址的内容放入A寄存器
    //停机     内存地址输入  内存数据输入  内存数据输出 |  指令寄存器输出  指令寄存器输入   A寄存器输入    A寄存器输出
    //ALU输出  减法         B寄存器输入   B寄存器输出  |  输出寄存器输入  程序计数允许    程序计数器输出  程序计数器输入（JUMP） ALU的flag寄存器更新
    all_command[9'b01_0001_000]<=17'b0100_0000_0000_0010_0;//内存地址输入 程序计数器输出
    all_command[9'b01_0001_001]<=17'b0001_0100_0000_0100_0;//内存数据输出 指令寄存器输入 程序计数允许
    all_command[9'b01_0001_010]<=17'b0100_1000_0000_0000_0;//指令寄存器输出 内存地址输入
    all_command[9'b01_0001_011]<=17'b0001_0010_0000_0000_0;//内存数据输出 A寄存器输入
    all_command[9'b01_0001_100]<=17'b0000_0000_0000_0000_0;
    all_command[9'b01_0001_101]<=17'b0000_0000_0000_0000_0;
    all_command[9'b01_0001_110]<=17'b0000_0000_0000_0000_0;
    all_command[9'b01_0001_111]<=17'b0000_0000_0000_0000_0;

    //0010-ADD 把指令低四位作为指定内存地址的内容与A寄存器的数值相加，结果覆写A寄存器
    //停机     内存地址输入  内存数据输入  内存数据输出 |  指令寄存器输出  指令寄存器输入   A寄存器输入    A寄存器输出
    //ALU输出  减法         B寄存器输入   B寄存器输出  |  输出寄存器输入  程序计数允许    程序计数器输出  程序计数器输入（JUMP） ALU的flag寄存器更新
    all_command[9'b01_0010_000]<=17'b0100_0000_0000_0010_0;//内存地址输入 程序计数器输出
    all_command[9'b01_0010_001]<=17'b0001_0100_0000_0100_0;//内存数据输出 指令寄存器输入 程序计数允许
    all_command[9'b01_0010_010]<=17'b0100_1000_0000_0000_0;//指令寄存器输出 内存地址输入
    all_command[9'b01_0010_011]<=17'b0001_0000_0010_0000_0;//内存数据输出 B寄存器输入
    all_command[9'b01_0010_100]<=17'b0000_0010_1000_0000_1;//ALU输出 A寄存器输入 ALU的flag寄存器更新
    all_command[9'b01_0010_101]<=17'b0000_0000_0000_0000_0;
    all_command[9'b01_0010_110]<=17'b0000_0000_0000_0000_0;
    all_command[9'b01_0010_111]<=17'b0000_0000_0000_0000_0;
    
    //0011-SUB 把指令低四位作为指定内存地址的内容与A寄存器的数值相减，结果覆写A寄存器
    //停机     内存地址输入  内存数据输入  内存数据输出 |  指令寄存器输出  指令寄存器输入   A寄存器输入    A寄存器输出
    //ALU输出  减法         B寄存器输入   B寄存器输出  |  输出寄存器输入  程序计数允许    程序计数器输出  程序计数器输入（JUMP） ALU的flag寄存器更新
    all_command[9'b01_0011_000]<=17'b0100_0000_0000_0010_0;//内存地址输入 程序计数器输出
    all_command[9'b01_0011_001]<=17'b0001_0100_0000_0100_0;//内存数据输出 指令寄存器输入 程序计数允许
    all_command[9'b01_0011_010]<=17'b0100_1000_0000_0000_0;//指令寄存器输出 内存地址输入
    all_command[9'b01_0011_011]<=17'b0001_0000_0010_0000_0;//内存数据输出 B寄存器输入
    all_command[9'b01_0011_100]<=17'b0000_0010_1100_0000_1;//ALU输出 A寄存器输入 减法 ALU的flag寄存器更新
    all_command[9'b01_0011_101]<=17'b0000_0000_0000_0000_0;
    all_command[9'b01_0011_110]<=17'b0000_0000_0000_0000_0;
    all_command[9'b01_0011_111]<=17'b0000_0000_0000_0000_0;

    //0100-STA 把A寄存器的内容存入指令低四位作为指定内存地址
    //停机     内存地址输入  内存数据输入  内存数据输出 |  指令寄存器输出  指令寄存器输入   A寄存器输入    A寄存器输出
    //ALU输出  减法         B寄存器输入   B寄存器输出  |  输出寄存器输入  程序计数允许    程序计数器输出  程序计数器输入（JUMP） ALU的flag寄存器更新
    all_command[9'b01_0100_000]<=17'b0100_0000_0000_0010_0;//内存地址输入 程序计数器输出
    all_command[9'b01_0100_001]<=17'b0001_0100_0000_0100_0;//内存数据输出 指令寄存器输入 程序计数允许
    all_command[9'b01_0100_010]<=17'b0100_1000_0000_0000_0;//指令寄存器输出 内存地址输入
    all_command[9'b01_0100_011]<=17'b0010_0001_0000_0000_0;//A寄存器输出 内存数据输入
    all_command[9'b01_0100_100]<=17'b0000_0000_0000_0000_0;
    all_command[9'b01_0100_101]<=17'b0000_0000_0000_0000_0;
    all_command[9'b01_0100_110]<=17'b0000_0000_0000_0000_0;
    all_command[9'b01_0100_111]<=17'b0000_0000_0000_0000_0;

    //0101-LDI 把指令低四位的内容放入A寄存器
    //停机     内存地址输入  内存数据输入  内存数据输出 |  指令寄存器输出  指令寄存器输入   A寄存器输入    A寄存器输出
    //ALU输出  减法         B寄存器输入   B寄存器输出  |  输出寄存器输入  程序计数允许    程序计数器输出  程序计数器输入（JUMP） ALU的flag寄存器更新
    all_command[9'b01_0101_000]<=17'b0100_0000_0000_0010_0;//内存地址输入 程序计数器输出
    all_command[9'b01_0101_001]<=17'b0001_0100_0000_0100_0;//内存数据输出 指令寄存器输入 程序计数允许
    all_command[9'b01_0101_010]<=17'b0000_1010_0000_0000_0;//指令寄存器输出 A寄存器输入
    all_command[9'b01_0101_011]<=17'b0000_0000_0000_0000_0;
    all_command[9'b01_0101_100]<=17'b0000_0000_0000_0000_0;
    all_command[9'b01_0101_101]<=17'b0000_0000_0000_0000_0;
    all_command[9'b01_0101_110]<=17'b0000_0000_0000_0000_0;
    all_command[9'b01_0101_111]<=17'b0000_0000_0000_0000_0;

    //0110-JMP 把指令低四位的内容作为程序下一次跳转到的地址
    //停机     内存地址输入  内存数据输入  内存数据输出 |  指令寄存器输出  指令寄存器输入   A寄存器输入    A寄存器输出
    //ALU输出  减法         B寄存器输入   B寄存器输出  |  输出寄存器输入  程序计数允许    程序计数器输出  程序计数器输入（JUMP） ALU的flag寄存器更新
    all_command[9'b01_0110_000]<=17'b0100_0000_0000_0010_0;//内存地址输入 程序计数器输出
    all_command[9'b01_0110_001]<=17'b0001_0100_0000_0100_0;//内存数据输出 指令寄存器输入 程序计数允许
    all_command[9'b01_0110_010]<=17'b0000_1000_0000_0001_0;//指令寄存器输出 程序计数器输入
    all_command[9'b01_0110_011]<=17'b0000_0000_0000_0000_0;
    all_command[9'b01_0110_100]<=17'b0000_0000_0000_0000_0;
    all_command[9'b01_0110_101]<=17'b0000_0000_0000_0000_0;
    all_command[9'b01_0110_110]<=17'b0000_0000_0000_0000_0;
    all_command[9'b01_0110_111]<=17'b0000_0000_0000_0000_0;

    //0111-JZ ALU内容为0时跳转到指令低四位指向的内存地址，否则不工作
    //停机     内存地址输入  内存数据输入  内存数据输出 |  指令寄存器输出  指令寄存器输入   A寄存器输入    A寄存器输出
    //ALU输出  减法         B寄存器输入   B寄存器输出  |  输出寄存器输入  程序计数允许    程序计数器输出  程序计数器输入（JUMP） ALU的flag寄存器更新
    all_command[9'b01_0111_000]<=17'b0100_0000_0000_0010_0;//内存地址输入 程序计数器输出
    all_command[9'b01_0111_001]<=17'b0001_0100_0000_0100_0;//内存数据输出 指令寄存器输入 程序计数允许
    all_command[9'b01_0111_010]<=17'b0000_1000_0000_0001_0;//指令寄存器输出 程序计数器输入
    all_command[9'b01_0111_011]<=17'b0000_0000_0000_0000_0;
    all_command[9'b01_0111_100]<=17'b0000_0000_0000_0000_0;
    all_command[9'b01_0111_101]<=17'b0000_0000_0000_0000_0;
    all_command[9'b01_0111_110]<=17'b0000_0000_0000_0000_0;
    all_command[9'b01_0111_111]<=17'b0000_0000_0000_0000_0;

    //1000-JF ALU内容为满时跳转到指令低四位指向的内存地址，否则不工作
    //停机     内存地址输入  内存数据输入  内存数据输出 |  指令寄存器输出  指令寄存器输入   A寄存器输入    A寄存器输出
    //ALU输出  减法         B寄存器输入   B寄存器输出  |  输出寄存器输入  程序计数允许    程序计数器输出  程序计数器输入（JUMP） ALU的flag寄存器更新
    all_command[9'b01_1000_000]<=17'b0100_0000_0000_0010_0;//内存地址输入 程序计数器输出
    all_command[9'b01_1000_001]<=17'b0001_0100_0000_0100_0;//内存数据输出 指令寄存器输入 程序计数允许
    all_command[9'b01_1000_010]<=17'b0000_0000_0000_0000_0;
    all_command[9'b01_1000_011]<=17'b0000_0000_0000_0000_0;
    all_command[9'b01_1000_100]<=17'b0000_0000_0000_0000_0;
    all_command[9'b01_1000_101]<=17'b0000_0000_0000_0000_0;
    all_command[9'b01_1000_110]<=17'b0000_0000_0000_0000_0;
    all_command[9'b01_1000_111]<=17'b0000_0000_0000_0000_0;

    //1001
    all_command[9'b01_1001_000]<=17'b0000_0000_0000_0000_0;
    all_command[9'b01_1001_001]<=17'b0000_0000_0000_0000_0;
    all_command[9'b01_1001_010]<=17'b0000_0000_0000_0000_0;
    all_command[9'b01_1001_011]<=17'b0000_0000_0000_0000_0;
    all_command[9'b01_1001_100]<=17'b0000_0000_0000_0000_0;
    all_command[9'b01_1001_101]<=17'b0000_0000_0000_0000_0;
    all_command[9'b01_1001_110]<=17'b0000_0000_0000_0000_0;
    all_command[9'b01_1001_111]<=17'b0000_0000_0000_0000_0;
    //1010
    all_command[9'b01_1010_000]<=17'b0000_0000_0000_0000_0;
    all_command[9'b01_1010_001]<=17'b0000_0000_0000_0000_0;
    all_command[9'b01_1010_010]<=17'b0000_0000_0000_0000_0;
    all_command[9'b01_1010_011]<=17'b0000_0000_0000_0000_0;
    all_command[9'b01_1010_100]<=17'b0000_0000_0000_0000_0;
    all_command[9'b01_1010_101]<=17'b0000_0000_0000_0000_0;
    all_command[9'b01_1010_110]<=17'b0000_0000_0000_0000_0;
    all_command[9'b01_1010_111]<=17'b0000_0000_0000_0000_0;
    //1011
    all_command[9'b01_1011_000]<=17'b0000_0000_0000_0000_0;
    all_command[9'b01_1011_001]<=17'b0000_0000_0000_0000_0;
    all_command[9'b01_1011_010]<=17'b0000_0000_0000_0000_0;
    all_command[9'b01_1011_011]<=17'b0000_0000_0000_0000_0;
    all_command[9'b01_1011_100]<=17'b0000_0000_0000_0000_0;
    all_command[9'b01_1011_101]<=17'b0000_0000_0000_0000_0;
    all_command[9'b01_1011_110]<=17'b0000_0000_0000_0000_0;
    all_command[9'b01_1011_111]<=17'b0000_0000_0000_0000_0;
    //1100
    all_command[9'b01_1100_000]<=17'b0000_0000_0000_0000_0;
    all_command[9'b01_1100_001]<=17'b0000_0000_0000_0000_0;
    all_command[9'b01_1100_010]<=17'b0000_0000_0000_0000_0;
    all_command[9'b01_1100_011]<=17'b0000_0000_0000_0000_0;
    all_command[9'b01_1100_100]<=17'b0000_0000_0000_0000_0;
    all_command[9'b01_1100_101]<=17'b0000_0000_0000_0000_0;
    all_command[9'b01_1100_110]<=17'b0000_0000_0000_0000_0;
    all_command[9'b01_1100_111]<=17'b0000_0000_0000_0000_0;
    //1101
    all_command[9'b01_1101_000]<=17'b0000_0000_0000_0000_0;
    all_command[9'b01_1101_001]<=17'b0000_0000_0000_0000_0;
    all_command[9'b01_1101_010]<=17'b0000_0000_0000_0000_0;
    all_command[9'b01_1101_011]<=17'b0000_0000_0000_0000_0;
    all_command[9'b01_1101_100]<=17'b0000_0000_0000_0000_0;
    all_command[9'b01_1101_101]<=17'b0000_0000_0000_0000_0;
    all_command[9'b01_1101_110]<=17'b0000_0000_0000_0000_0;
    all_command[9'b01_1101_111]<=17'b0000_0000_0000_0000_0;

    //1110-OUT 把A寄存器的结果存到输出寄存器
    //停机     内存地址输入  内存数据输入  内存数据输出 |  指令寄存器输出  指令寄存器输入   A寄存器输入    A寄存器输出
    //ALU输出  减法         B寄存器输入   B寄存器输出  |  输出寄存器输入  程序计数允许    程序计数器输出  程序计数器输入（JUMP） ALU的flag寄存器更新
    all_command[9'b01_1110_000]<=17'b0100_0000_0000_0010_0;//内存地址输入 程序计数器输出
    all_command[9'b01_1110_001]<=17'b0001_0100_0000_0100_0;//内存数据输出 指令寄存器输入 程序计数允许
    all_command[9'b01_1110_010]<=17'b0000_0001_0000_1000_0;//A寄存器输出 输出寄存器输入
    all_command[9'b01_1110_011]<=17'b0000_0000_0000_0000_0;
    all_command[9'b01_1110_100]<=17'b0000_0000_0000_0000_0;
    all_command[9'b01_1110_101]<=17'b0000_0000_0000_0000_0;
    all_command[9'b01_1110_110]<=17'b0000_0000_0000_0000_0;
    all_command[9'b01_1110_111]<=17'b0000_0000_0000_0000_0;

    //1111-HLT 停机
    //停机     内存地址输入  内存数据输入  内存数据输出 |  指令寄存器输出  指令寄存器输入   A寄存器输入    A寄存器输出
    //ALU输出  减法         B寄存器输入   B寄存器输出  |  输出寄存器输入  程序计数允许    程序计数器输出  程序计数器输入（JUMP） ALU的flag寄存器更新
    all_command[9'b01_1111_000]<=17'b0100_0000_0000_0010_0;//内存地址输入 程序计数器输出
    all_command[9'b01_1111_001]<=17'b0001_0100_0000_0100_0;//内存数据输出 指令寄存器输入 程序计数允许
    all_command[9'b01_1111_010]<=17'b1000_0000_0000_0000_0;//停机
    all_command[9'b01_1111_011]<=17'b0000_0000_0000_0000_0;
    all_command[9'b01_1111_100]<=17'b0000_0000_0000_0000_0;
    all_command[9'b01_1111_101]<=17'b0000_0000_0000_0000_0;
    all_command[9'b01_1111_110]<=17'b0000_0000_0000_0000_0;
    all_command[9'b01_1111_111]<=17'b0000_0000_0000_0000_0;
    //JF=1,JZ=0--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    //0000-NOP 空等待
    //停机     内存地址输入  内存数据输入  内存数据输出 |  指令寄存器输出  指令寄存器输入   A寄存器输入    A寄存器输出
    //ALU输出  减法         B寄存器输入   B寄存器输出  |  输出寄存器输入  程序计数允许    程序计数器输出  程序计数器输入（JUMP） ALU的flag寄存器更新
    all_command[9'b10_0000_000]<=17'b0100_0000_0000_0010_0;//内存地址输入 程序计数器输出
    all_command[9'b10_0000_001]<=17'b0001_0100_0000_0100_0;//内存数据输出 指令寄存器输入 程序计数允许
    all_command[9'b10_0000_010]<=17'b0000_0000_0000_0000_0;
    all_command[9'b10_0000_011]<=17'b0000_0000_0000_0000_0;
    all_command[9'b10_0000_100]<=17'b0000_0000_0000_0000_0;
    all_command[9'b10_0000_101]<=17'b0000_0000_0000_0000_0;
    all_command[9'b10_0000_110]<=17'b0000_0000_0000_0000_0;
    all_command[9'b10_0000_111]<=17'b0000_0000_0000_0000_0;

    //0001-LDA 把指令低四位作为指定内存地址的内容放入A寄存器
    //停机     内存地址输入  内存数据输入  内存数据输出 |  指令寄存器输出  指令寄存器输入   A寄存器输入    A寄存器输出
    //ALU输出  减法         B寄存器输入   B寄存器输出  |  输出寄存器输入  程序计数允许    程序计数器输出  程序计数器输入（JUMP） ALU的flag寄存器更新
    all_command[9'b10_0001_000]<=17'b0100_0000_0000_0010_0;//内存地址输入 程序计数器输出
    all_command[9'b10_0001_001]<=17'b0001_0100_0000_0100_0;//内存数据输出 指令寄存器输入 程序计数允许
    all_command[9'b10_0001_010]<=17'b0100_1000_0000_0000_0;//指令寄存器输出 内存地址输入
    all_command[9'b10_0001_011]<=17'b0001_0010_0000_0000_0;//内存数据输出 A寄存器输入
    all_command[9'b10_0001_100]<=17'b0000_0000_0000_0000_0;
    all_command[9'b10_0001_101]<=17'b0000_0000_0000_0000_0;
    all_command[9'b10_0001_110]<=17'b0000_0000_0000_0000_0;
    all_command[9'b10_0001_111]<=17'b0000_0000_0000_0000_0;

    //0010-ADD 把指令低四位作为指定内存地址的内容与A寄存器的数值相加，结果覆写A寄存器
    //停机     内存地址输入  内存数据输入  内存数据输出 |  指令寄存器输出  指令寄存器输入   A寄存器输入    A寄存器输出
    //ALU输出  减法         B寄存器输入   B寄存器输出  |  输出寄存器输入  程序计数允许    程序计数器输出  程序计数器输入（JUMP） ALU的flag寄存器更新
    all_command[9'b10_0010_000]<=17'b0100_0000_0000_0010_0;//内存地址输入 程序计数器输出
    all_command[9'b10_0010_001]<=17'b0001_0100_0000_0100_0;//内存数据输出 指令寄存器输入 程序计数允许
    all_command[9'b10_0010_010]<=17'b0100_1000_0000_0000_0;//指令寄存器输出 内存地址输入
    all_command[9'b10_0010_011]<=17'b0001_0000_0010_0000_0;//内存数据输出 B寄存器输入
    all_command[9'b10_0010_100]<=17'b0000_0010_1000_0000_1;//ALU输出 A寄存器输入 ALU的flag寄存器更新
    all_command[9'b10_0010_101]<=17'b0000_0000_0000_0000_0;
    all_command[9'b10_0010_110]<=17'b0000_0000_0000_0000_0;
    all_command[9'b10_0010_111]<=17'b0000_0000_0000_0000_0;
    
    //0011-SUB 把指令低四位作为指定内存地址的内容与A寄存器的数值相减，结果覆写A寄存器
    //停机     内存地址输入  内存数据输入  内存数据输出 |  指令寄存器输出  指令寄存器输入   A寄存器输入    A寄存器输出
    //ALU输出  减法         B寄存器输入   B寄存器输出  |  输出寄存器输入  程序计数允许    程序计数器输出  程序计数器输入（JUMP） ALU的flag寄存器更新
    all_command[9'b10_0011_000]<=17'b0100_0000_0000_0010_0;//内存地址输入 程序计数器输出
    all_command[9'b10_0011_001]<=17'b0001_0100_0000_0100_0;//内存数据输出 指令寄存器输入 程序计数允许
    all_command[9'b10_0011_010]<=17'b0100_1000_0000_0000_0;//指令寄存器输出 内存地址输入
    all_command[9'b10_0011_011]<=17'b0001_0000_0010_0000_0;//内存数据输出 B寄存器输入
    all_command[9'b10_0011_100]<=17'b0000_0010_1100_0000_1;//ALU输出 A寄存器输入 减法 ALU的flag寄存器更新
    all_command[9'b10_0011_101]<=17'b0000_0000_0000_0000_0;
    all_command[9'b10_0011_110]<=17'b0000_0000_0000_0000_0;
    all_command[9'b10_0011_111]<=17'b0000_0000_0000_0000_0;

    //0100-STA 把A寄存器的内容存入指令低四位作为指定内存地址
    //停机     内存地址输入  内存数据输入  内存数据输出 |  指令寄存器输出  指令寄存器输入   A寄存器输入    A寄存器输出
    //ALU输出  减法         B寄存器输入   B寄存器输出  |  输出寄存器输入  程序计数允许    程序计数器输出  程序计数器输入（JUMP） ALU的flag寄存器更新
    all_command[9'b10_0100_000]<=17'b0100_0000_0000_0010_0;//内存地址输入 程序计数器输出
    all_command[9'b10_0100_001]<=17'b0001_0100_0000_0100_0;//内存数据输出 指令寄存器输入 程序计数允许
    all_command[9'b10_0100_010]<=17'b0100_1000_0000_0000_0;//指令寄存器输出 内存地址输入
    all_command[9'b10_0100_011]<=17'b0010_0001_0000_0000_0;//A寄存器输出 内存数据输入
    all_command[9'b10_0100_100]<=17'b0000_0000_0000_0000_0;
    all_command[9'b10_0100_101]<=17'b0000_0000_0000_0000_0;
    all_command[9'b10_0100_110]<=17'b0000_0000_0000_0000_0;
    all_command[9'b10_0100_111]<=17'b0000_0000_0000_0000_0;

    //0101-LDI 把指令低四位的内容放入A寄存器
    //停机     内存地址输入  内存数据输入  内存数据输出 |  指令寄存器输出  指令寄存器输入   A寄存器输入    A寄存器输出
    //ALU输出  减法         B寄存器输入   B寄存器输出  |  输出寄存器输入  程序计数允许    程序计数器输出  程序计数器输入（JUMP） ALU的flag寄存器更新
    all_command[9'b10_0101_000]<=17'b0100_0000_0000_0010_0;//内存地址输入 程序计数器输出
    all_command[9'b10_0101_001]<=17'b0001_0100_0000_0100_0;//内存数据输出 指令寄存器输入 程序计数允许
    all_command[9'b10_0101_010]<=17'b0000_1010_0000_0000_0;//指令寄存器输出 A寄存器输入
    all_command[9'b10_0101_011]<=17'b0000_0000_0000_0000_0;
    all_command[9'b10_0101_100]<=17'b0000_0000_0000_0000_0;
    all_command[9'b10_0101_101]<=17'b0000_0000_0000_0000_0;
    all_command[9'b10_0101_110]<=17'b0000_0000_0000_0000_0;
    all_command[9'b10_0101_111]<=17'b0000_0000_0000_0000_0;

    //0110-JMP 把指令低四位的内容作为程序下一次跳转到的地址
    //停机     内存地址输入  内存数据输入  内存数据输出 |  指令寄存器输出  指令寄存器输入   A寄存器输入    A寄存器输出
    //ALU输出  减法         B寄存器输入   B寄存器输出  |  输出寄存器输入  程序计数允许    程序计数器输出  程序计数器输入（JUMP） ALU的flag寄存器更新
    all_command[9'b10_0110_000]<=17'b0100_0000_0000_0010_0;//内存地址输入 程序计数器输出
    all_command[9'b10_0110_001]<=17'b0001_0100_0000_0100_0;//内存数据输出 指令寄存器输入 程序计数允许
    all_command[9'b10_0110_010]<=17'b0000_1000_0000_0001_0;//指令寄存器输出 程序计数器输入
    all_command[9'b10_0110_011]<=17'b0000_0000_0000_0000_0;
    all_command[9'b10_0110_100]<=17'b0000_0000_0000_0000_0;
    all_command[9'b10_0110_101]<=17'b0000_0000_0000_0000_0;
    all_command[9'b10_0110_110]<=17'b0000_0000_0000_0000_0;
    all_command[9'b10_0110_111]<=17'b0000_0000_0000_0000_0;

    //0111-JZ ALU内容为0时跳转到指令低四位指向的内存地址，否则不工作
    //停机     内存地址输入  内存数据输入  内存数据输出 |  指令寄存器输出  指令寄存器输入   A寄存器输入    A寄存器输出
    //ALU输出  减法         B寄存器输入   B寄存器输出  |  输出寄存器输入  程序计数允许    程序计数器输出  程序计数器输入（JUMP） ALU的flag寄存器更新
    all_command[9'b10_0111_000]<=17'b0100_0000_0000_0010_0;//内存地址输入 程序计数器输出
    all_command[9'b10_0111_001]<=17'b0001_0100_0000_0100_0;//内存数据输出 指令寄存器输入 程序计数允许
    all_command[9'b10_0111_010]<=17'b0000_1000_0000_0001_0;//指令寄存器输出 程序计数器输入
    all_command[9'b10_0111_011]<=17'b0000_0000_0000_0000_0;
    all_command[9'b10_0111_100]<=17'b0000_0000_0000_0000_0;
    all_command[9'b10_0111_101]<=17'b0000_0000_0000_0000_0;
    all_command[9'b10_0111_110]<=17'b0000_0000_0000_0000_0;
    all_command[9'b10_0111_111]<=17'b0000_0000_0000_0000_0;

    //1000-JF ALU内容为满时跳转到指令低四位指向的内存地址，否则不工作
    //停机     内存地址输入  内存数据输入  内存数据输出 |  指令寄存器输出  指令寄存器输入   A寄存器输入    A寄存器输出
    //ALU输出  减法         B寄存器输入   B寄存器输出  |  输出寄存器输入  程序计数允许    程序计数器输出  程序计数器输入（JUMP） ALU的flag寄存器更新
    all_command[9'b10_1000_000]<=17'b0100_0000_0000_0010_0;//内存地址输入 程序计数器输出
    all_command[9'b10_1000_001]<=17'b0001_0100_0000_0100_0;//内存数据输出 指令寄存器输入 程序计数允许
    all_command[9'b10_1000_010]<=17'b0000_1000_0000_0001_0;//指令寄存器输出 程序计数器输入
    all_command[9'b10_1000_011]<=17'b0000_0000_0000_0000_0;
    all_command[9'b10_1000_100]<=17'b0000_0000_0000_0000_0;
    all_command[9'b10_1000_101]<=17'b0000_0000_0000_0000_0;
    all_command[9'b10_1000_110]<=17'b0000_0000_0000_0000_0;
    all_command[9'b10_1000_111]<=17'b0000_0000_0000_0000_0;

    //1001
    all_command[9'b10_1001_000]<=17'b0000_0000_0000_0000_0;
    all_command[9'b10_1001_001]<=17'b0000_0000_0000_0000_0;
    all_command[9'b10_1001_010]<=17'b0000_0000_0000_0000_0;
    all_command[9'b10_1001_011]<=17'b0000_0000_0000_0000_0;
    all_command[9'b10_1001_100]<=17'b0000_0000_0000_0000_0;
    all_command[9'b10_1001_101]<=17'b0000_0000_0000_0000_0;
    all_command[9'b10_1001_110]<=17'b0000_0000_0000_0000_0;
    all_command[9'b10_1001_111]<=17'b0000_0000_0000_0000_0;
    //1010
    all_command[9'b10_1010_000]<=17'b0000_0000_0000_0000_0;
    all_command[9'b10_1010_001]<=17'b0000_0000_0000_0000_0;
    all_command[9'b10_1010_010]<=17'b0000_0000_0000_0000_0;
    all_command[9'b10_1010_011]<=17'b0000_0000_0000_0000_0;
    all_command[9'b10_1010_100]<=17'b0000_0000_0000_0000_0;
    all_command[9'b10_1010_101]<=17'b0000_0000_0000_0000_0;
    all_command[9'b10_1010_110]<=17'b0000_0000_0000_0000_0;
    all_command[9'b10_1010_111]<=17'b0000_0000_0000_0000_0;
    //1011
    all_command[9'b10_1011_000]<=17'b0000_0000_0000_0000_0;
    all_command[9'b10_1011_001]<=17'b0000_0000_0000_0000_0;
    all_command[9'b10_1011_010]<=17'b0000_0000_0000_0000_0;
    all_command[9'b10_1011_011]<=17'b0000_0000_0000_0000_0;
    all_command[9'b10_1011_100]<=17'b0000_0000_0000_0000_0;
    all_command[9'b10_1011_101]<=17'b0000_0000_0000_0000_0;
    all_command[9'b10_1011_110]<=17'b0000_0000_0000_0000_0;
    all_command[9'b10_1011_111]<=17'b0000_0000_0000_0000_0;
    //1100
    all_command[9'b10_1100_000]<=17'b0000_0000_0000_0000_0;
    all_command[9'b10_1100_001]<=17'b0000_0000_0000_0000_0;
    all_command[9'b10_1100_010]<=17'b0000_0000_0000_0000_0;
    all_command[9'b10_1100_011]<=17'b0000_0000_0000_0000_0;
    all_command[9'b10_1100_100]<=17'b0000_0000_0000_0000_0;
    all_command[9'b10_1100_101]<=17'b0000_0000_0000_0000_0;
    all_command[9'b10_1100_110]<=17'b0000_0000_0000_0000_0;
    all_command[9'b10_1100_111]<=17'b0000_0000_0000_0000_0;
    //1101
    all_command[9'b10_1101_000]<=17'b0000_0000_0000_0000_0;
    all_command[9'b10_1101_001]<=17'b0000_0000_0000_0000_0;
    all_command[9'b10_1101_010]<=17'b0000_0000_0000_0000_0;
    all_command[9'b10_1101_011]<=17'b0000_0000_0000_0000_0;
    all_command[9'b10_1101_100]<=17'b0000_0000_0000_0000_0;
    all_command[9'b10_1101_101]<=17'b0000_0000_0000_0000_0;
    all_command[9'b10_1101_110]<=17'b0000_0000_0000_0000_0;
    all_command[9'b10_1101_111]<=17'b0000_0000_0000_0000_0;

    //1110-OUT 把A寄存器的结果存到输出寄存器
    //停机     内存地址输入  内存数据输入  内存数据输出 |  指令寄存器输出  指令寄存器输入   A寄存器输入    A寄存器输出
    //ALU输出  减法         B寄存器输入   B寄存器输出  |  输出寄存器输入  程序计数允许    程序计数器输出  程序计数器输入（JUMP） ALU的flag寄存器更新
    all_command[9'b10_1110_000]<=17'b0100_0000_0000_0010_0;//内存地址输入 程序计数器输出
    all_command[9'b10_1110_001]<=17'b0001_0100_0000_0100_0;//内存数据输出 指令寄存器输入 程序计数允许
    all_command[9'b10_1110_010]<=17'b0000_0000_0000_0000_0;
    all_command[9'b10_1110_011]<=17'b0000_0000_0000_0000_0;
    all_command[9'b10_1110_100]<=17'b0000_0000_0000_0000_0;
    all_command[9'b10_1110_101]<=17'b0000_0000_0000_0000_0;
    all_command[9'b10_1110_110]<=17'b0000_0000_0000_0000_0;
    all_command[9'b10_1110_111]<=17'b0000_0000_0000_0000_0;

    //1111-HLT 停机
    //停机     内存地址输入  内存数据输入  内存数据输出 |  指令寄存器输出  指令寄存器输入   A寄存器输入    A寄存器输出
    //ALU输出  减法         B寄存器输入   B寄存器输出  |  输出寄存器输入  程序计数允许    程序计数器输出  程序计数器输入（JUMP） ALU的flag寄存器更新
    all_command[9'b10_1111_000]<=17'b0100_0000_0000_0010_0;//内存地址输入 程序计数器输出
    all_command[9'b10_1111_001]<=17'b0001_0100_0000_0100_0;//内存数据输出 指令寄存器输入 程序计数允许
    all_command[9'b10_1111_010]<=17'b1000_0000_0000_0000_0;//停机
    all_command[9'b10_1111_011]<=17'b0000_0000_0000_0000_0;
    all_command[9'b10_1111_100]<=17'b0000_0000_0000_0000_0;
    all_command[9'b10_1111_101]<=17'b0000_0000_0000_0000_0;
    all_command[9'b10_1111_110]<=17'b0000_0000_0000_0000_0;
    all_command[9'b10_1111_111]<=17'b0000_0000_0000_0000_0;


    //JF=1,JZ=1 一般不会进入这种情况，但是为了分析综合不报错加上了--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    //0000-NOP 空等待
    //停机     内存地址输入  内存数据输入  内存数据输出 |  指令寄存器输出  指令寄存器输入   A寄存器输入    A寄存器输出
    //ALU输出  减法         B寄存器输入   B寄存器输出  |  输出寄存器输入  程序计数允许    程序计数器输出  程序计数器输入（JUMP） ALU的flag寄存器更新
    all_command[9'b11_0000_000]<=17'b0100_0000_0000_0010_0;//内存地址输入 程序计数器输出
    all_command[9'b11_0000_001]<=17'b0001_0100_0000_0100_0;//内存数据输出 指令寄存器输入 程序计数允许
    all_command[9'b11_0000_010]<=17'b0000_0000_0000_0000_0;
    all_command[9'b11_0000_011]<=17'b0000_0000_0000_0000_0;
    all_command[9'b11_0000_100]<=17'b0000_0000_0000_0000_0;
    all_command[9'b11_0000_101]<=17'b0000_0000_0000_0000_0;
    all_command[9'b11_0000_110]<=17'b0000_0000_0000_0000_0;
    all_command[9'b11_0000_111]<=17'b0000_0000_0000_0000_0;

    //0001-LDA 把指令低四位作为指定内存地址的内容放入A寄存器
    //停机     内存地址输入  内存数据输入  内存数据输出 |  指令寄存器输出  指令寄存器输入   A寄存器输入    A寄存器输出
    //ALU输出  减法         B寄存器输入   B寄存器输出  |  输出寄存器输入  程序计数允许    程序计数器输出  程序计数器输入（JUMP） ALU的flag寄存器更新
    all_command[9'b11_0001_000]<=17'b0100_0000_0000_0010_0;//内存地址输入 程序计数器输出
    all_command[9'b11_0001_001]<=17'b0001_0100_0000_0100_0;//内存数据输出 指令寄存器输入 程序计数允许
    all_command[9'b11_0001_010]<=17'b0100_1000_0000_0000_0;//指令寄存器输出 内存地址输入
    all_command[9'b11_0001_011]<=17'b0001_0010_0000_0000_0;//内存数据输出 A寄存器输入
    all_command[9'b11_0001_100]<=17'b0000_0000_0000_0000_0;
    all_command[9'b11_0001_101]<=17'b0000_0000_0000_0000_0;
    all_command[9'b11_0001_110]<=17'b0000_0000_0000_0000_0;
    all_command[9'b11_0001_111]<=17'b0000_0000_0000_0000_0;

    //0010-ADD 把指令低四位作为指定内存地址的内容与A寄存器的数值相加，结果覆写A寄存器
    //停机     内存地址输入  内存数据输入  内存数据输出 |  指令寄存器输出  指令寄存器输入   A寄存器输入    A寄存器输出
    //ALU输出  减法         B寄存器输入   B寄存器输出  |  输出寄存器输入  程序计数允许    程序计数器输出  程序计数器输入（JUMP） ALU的flag寄存器更新
    all_command[9'b11_0010_000]<=17'b0100_0000_0000_0010_0;//内存地址输入 程序计数器输出
    all_command[9'b11_0010_001]<=17'b0001_0100_0000_0100_0;//内存数据输出 指令寄存器输入 程序计数允许
    all_command[9'b11_0010_010]<=17'b0100_1000_0000_0000_0;//指令寄存器输出 内存地址输入
    all_command[9'b11_0010_011]<=17'b0001_0000_0010_0000_0;//内存数据输出 B寄存器输入
    all_command[9'b11_0010_100]<=17'b0000_0010_1000_0000_1;//ALU输出 A寄存器输入 ALU的flag寄存器更新
    all_command[9'b11_0010_101]<=17'b0000_0000_0000_0000_0;
    all_command[9'b11_0010_110]<=17'b0000_0000_0000_0000_0;
    all_command[9'b11_0010_111]<=17'b0000_0000_0000_0000_0;
    
    //0011-SUB 把指令低四位作为指定内存地址的内容与A寄存器的数值相减，结果覆写A寄存器
    //停机     内存地址输入  内存数据输入  内存数据输出 |  指令寄存器输出  指令寄存器输入   A寄存器输入    A寄存器输出
    //ALU输出  减法         B寄存器输入   B寄存器输出  |  输出寄存器输入  程序计数允许    程序计数器输出  程序计数器输入（JUMP） ALU的flag寄存器更新
    all_command[9'b11_0011_000]<=17'b0100_0000_0000_0010_0;//内存地址输入 程序计数器输出
    all_command[9'b11_0011_001]<=17'b0001_0100_0000_0100_0;//内存数据输出 指令寄存器输入 程序计数允许
    all_command[9'b11_0011_010]<=17'b0100_1000_0000_0000_0;//指令寄存器输出 内存地址输入
    all_command[9'b11_0011_011]<=17'b0001_0000_0010_0000_0;//内存数据输出 B寄存器输入
    all_command[9'b11_0011_100]<=17'b0000_0010_1100_0000_1;//ALU输出 A寄存器输入 减法 ALU的flag寄存器更新
    all_command[9'b11_0011_101]<=17'b0000_0000_0000_0000_0;
    all_command[9'b11_0011_110]<=17'b0000_0000_0000_0000_0;
    all_command[9'b11_0011_111]<=17'b0000_0000_0000_0000_0;

    //0100-STA 把A寄存器的内容存入指令低四位作为指定内存地址
    //停机     内存地址输入  内存数据输入  内存数据输出 |  指令寄存器输出  指令寄存器输入   A寄存器输入    A寄存器输出
    //ALU输出  减法         B寄存器输入   B寄存器输出  |  输出寄存器输入  程序计数允许    程序计数器输出  程序计数器输入（JUMP） ALU的flag寄存器更新
    all_command[9'b11_0100_000]<=17'b0100_0000_0000_0010_0;//内存地址输入 程序计数器输出
    all_command[9'b11_0100_001]<=17'b0001_0100_0000_0100_0;//内存数据输出 指令寄存器输入 程序计数允许
    all_command[9'b11_0100_010]<=17'b0100_1000_0000_0000_0;//指令寄存器输出 内存地址输入
    all_command[9'b11_0100_011]<=17'b0010_0001_0000_0000_0;//A寄存器输出 内存数据输入
    all_command[9'b11_0100_100]<=17'b0000_0000_0000_0000_0;
    all_command[9'b11_0100_101]<=17'b0000_0000_0000_0000_0;
    all_command[9'b11_0100_110]<=17'b0000_0000_0000_0000_0;
    all_command[9'b11_0100_111]<=17'b0000_0000_0000_0000_0;

    //0101-LDI 把指令低四位的内容放入A寄存器
    //停机     内存地址输入  内存数据输入  内存数据输出 |  指令寄存器输出  指令寄存器输入   A寄存器输入    A寄存器输出
    //ALU输出  减法         B寄存器输入   B寄存器输出  |  输出寄存器输入  程序计数允许    程序计数器输出  程序计数器输入（JUMP） ALU的flag寄存器更新
    all_command[9'b11_0101_000]<=17'b0100_0000_0000_0010_0;//内存地址输入 程序计数器输出
    all_command[9'b11_0101_001]<=17'b0001_0100_0000_0100_0;//内存数据输出 指令寄存器输入 程序计数允许
    all_command[9'b11_0101_010]<=17'b0000_1010_0000_0000_0;//指令寄存器输出 A寄存器输入
    all_command[9'b11_0101_011]<=17'b0000_0000_0000_0000_0;
    all_command[9'b11_0101_100]<=17'b0000_0000_0000_0000_0;
    all_command[9'b11_0101_101]<=17'b0000_0000_0000_0000_0;
    all_command[9'b11_0101_110]<=17'b0000_0000_0000_0000_0;
    all_command[9'b11_0101_111]<=17'b0000_0000_0000_0000_0;

    //0110-JMP 把指令低四位的内容作为程序下一次跳转到的地址
    //停机     内存地址输入  内存数据输入  内存数据输出 |  指令寄存器输出  指令寄存器输入   A寄存器输入    A寄存器输出
    //ALU输出  减法         B寄存器输入   B寄存器输出  |  输出寄存器输入  程序计数允许    程序计数器输出  程序计数器输入（JUMP） ALU的flag寄存器更新
    all_command[9'b11_0110_000]<=17'b0100_0000_0000_0010_0;//内存地址输入 程序计数器输出
    all_command[9'b11_0110_001]<=17'b0001_0100_0000_0100_0;//内存数据输出 指令寄存器输入 程序计数允许
    all_command[9'b11_0110_010]<=17'b0000_1000_0000_0001_0;//指令寄存器输出 程序计数器输入
    all_command[9'b11_0110_011]<=17'b0000_0000_0000_0000_0;
    all_command[9'b11_0110_100]<=17'b0000_0000_0000_0000_0;
    all_command[9'b11_0110_101]<=17'b0000_0000_0000_0000_0;
    all_command[9'b11_0110_110]<=17'b0000_0000_0000_0000_0;
    all_command[9'b11_0110_111]<=17'b0000_0000_0000_0000_0;

    //0111-JZ ALU内容为0时跳转到指令低四位指向的内存地址，否则不工作
    //停机     内存地址输入  内存数据输入  内存数据输出 |  指令寄存器输出  指令寄存器输入   A寄存器输入    A寄存器输出
    //ALU输出  减法         B寄存器输入   B寄存器输出  |  输出寄存器输入  程序计数允许    程序计数器输出  程序计数器输入（JUMP） ALU的flag寄存器更新
    all_command[9'b11_0111_000]<=17'b0100_0000_0000_0010_0;//内存地址输入 程序计数器输出
    all_command[9'b11_0111_001]<=17'b0001_0100_0000_0100_0;//内存数据输出 指令寄存器输入 程序计数允许
    all_command[9'b11_0111_010]<=17'b0000_1000_0000_0001_0;//指令寄存器输出 程序计数器输入
    all_command[9'b11_0111_011]<=17'b0000_0000_0000_0000_0;
    all_command[9'b11_0111_100]<=17'b0000_0000_0000_0000_0;
    all_command[9'b11_0111_101]<=17'b0000_0000_0000_0000_0;
    all_command[9'b11_0111_110]<=17'b0000_0000_0000_0000_0;
    all_command[9'b11_0111_111]<=17'b0000_0000_0000_0000_0;

    //1000-JF ALU内容为满时跳转到指令低四位指向的内存地址，否则不工作
    //停机     内存地址输入  内存数据输入  内存数据输出 |  指令寄存器输出  指令寄存器输入   A寄存器输入    A寄存器输出
    //ALU输出  减法         B寄存器输入   B寄存器输出  |  输出寄存器输入  程序计数允许    程序计数器输出  程序计数器输入（JUMP） ALU的flag寄存器更新
    all_command[9'b11_1000_000]<=17'b0100_0000_0000_0010_0;//内存地址输入 程序计数器输出
    all_command[9'b11_1000_001]<=17'b0001_0100_0000_0100_0;//内存数据输出 指令寄存器输入 程序计数允许
    all_command[9'b11_1000_010]<=17'b0000_1000_0000_0001_0;//指令寄存器输出 程序计数器输入
    all_command[9'b11_1000_011]<=17'b0000_0000_0000_0000_0;
    all_command[9'b11_1000_100]<=17'b0000_0000_0000_0000_0;
    all_command[9'b11_1000_101]<=17'b0000_0000_0000_0000_0;
    all_command[9'b11_1000_110]<=17'b0000_0000_0000_0000_0;
    all_command[9'b11_1000_111]<=17'b0000_0000_0000_0000_0;

    //1001
    all_command[9'b11_1001_000]<=17'b0000_0000_0000_0000_0;
    all_command[9'b11_1001_001]<=17'b0000_0000_0000_0000_0;
    all_command[9'b11_1001_010]<=17'b0000_0000_0000_0000_0;
    all_command[9'b11_1001_011]<=17'b0000_0000_0000_0000_0;
    all_command[9'b11_1001_100]<=17'b0000_0000_0000_0000_0;
    all_command[9'b11_1001_101]<=17'b0000_0000_0000_0000_0;
    all_command[9'b11_1001_110]<=17'b0000_0000_0000_0000_0;
    all_command[9'b11_1001_111]<=17'b0000_0000_0000_0000_0;
    //1010
    all_command[9'b11_1010_000]<=17'b0000_0000_0000_0000_0;
    all_command[9'b11_1010_001]<=17'b0000_0000_0000_0000_0;
    all_command[9'b11_1010_010]<=17'b0000_0000_0000_0000_0;
    all_command[9'b11_1010_011]<=17'b0000_0000_0000_0000_0;
    all_command[9'b11_1010_100]<=17'b0000_0000_0000_0000_0;
    all_command[9'b11_1010_101]<=17'b0000_0000_0000_0000_0;
    all_command[9'b11_1010_110]<=17'b0000_0000_0000_0000_0;
    all_command[9'b11_1010_111]<=17'b0000_0000_0000_0000_0;
    //1011
    all_command[9'b11_1011_000]<=17'b0000_0000_0000_0000_0;
    all_command[9'b11_1011_001]<=17'b0000_0000_0000_0000_0;
    all_command[9'b11_1011_010]<=17'b0000_0000_0000_0000_0;
    all_command[9'b11_1011_011]<=17'b0000_0000_0000_0000_0;
    all_command[9'b11_1011_100]<=17'b0000_0000_0000_0000_0;
    all_command[9'b11_1011_101]<=17'b0000_0000_0000_0000_0;
    all_command[9'b11_1011_110]<=17'b0000_0000_0000_0000_0;
    all_command[9'b11_1011_111]<=17'b0000_0000_0000_0000_0;
    //1100
    all_command[9'b11_1100_000]<=17'b0000_0000_0000_0000_0;
    all_command[9'b11_1100_001]<=17'b0000_0000_0000_0000_0;
    all_command[9'b11_1100_010]<=17'b0000_0000_0000_0000_0;
    all_command[9'b11_1100_011]<=17'b0000_0000_0000_0000_0;
    all_command[9'b11_1100_100]<=17'b0000_0000_0000_0000_0;
    all_command[9'b11_1100_101]<=17'b0000_0000_0000_0000_0;
    all_command[9'b11_1100_110]<=17'b0000_0000_0000_0000_0;
    all_command[9'b11_1100_111]<=17'b0000_0000_0000_0000_0;
    //1101
    all_command[9'b11_1101_000]<=17'b0000_0000_0000_0000_0;
    all_command[9'b11_1101_001]<=17'b0000_0000_0000_0000_0;
    all_command[9'b11_1101_010]<=17'b0000_0000_0000_0000_0;
    all_command[9'b11_1101_011]<=17'b0000_0000_0000_0000_0;
    all_command[9'b11_1101_100]<=17'b0000_0000_0000_0000_0;
    all_command[9'b11_1101_101]<=17'b0000_0000_0000_0000_0;
    all_command[9'b11_1101_110]<=17'b0000_0000_0000_0000_0;
    all_command[9'b11_1101_111]<=17'b0000_0000_0000_0000_0;

    //1110-OUT 把A寄存器的结果存到输出寄存器
    //停机     内存地址输入  内存数据输入  内存数据输出 |  指令寄存器输出  指令寄存器输入   A寄存器输入    A寄存器输出
    //ALU输出  减法         B寄存器输入   B寄存器输出  |  输出寄存器输入  程序计数允许    程序计数器输出  程序计数器输入（JUMP） ALU的flag寄存器更新
    all_command[9'b11_1110_000]<=17'b0100_0000_0000_0010_0;//内存地址输入 程序计数器输出
    all_command[9'b11_1110_001]<=17'b0001_0100_0000_0100_0;//内存数据输出 指令寄存器输入 程序计数允许
    all_command[9'b11_1110_010]<=17'b0000_0000_0000_0000_0;
    all_command[9'b11_1110_011]<=17'b0000_0000_0000_0000_0;
    all_command[9'b11_1110_100]<=17'b0000_0000_0000_0000_0;
    all_command[9'b11_1110_101]<=17'b0000_0000_0000_0000_0;
    all_command[9'b11_1110_110]<=17'b0000_0000_0000_0000_0;
    all_command[9'b11_1110_111]<=17'b0000_0000_0000_0000_0;

    //1111-HLT 停机
    //停机     内存地址输入  内存数据输入  内存数据输出 |  指令寄存器输出  指令寄存器输入   A寄存器输入    A寄存器输出
    //ALU输出  减法         B寄存器输入   B寄存器输出  |  输出寄存器输入  程序计数允许    程序计数器输出  程序计数器输入（JUMP） ALU的flag寄存器更新
    all_command[9'b11_1111_000]<=17'b0100_0000_0000_0010_0;//内存地址输入 程序计数器输出
    all_command[9'b11_1111_001]<=17'b0001_0100_0000_0100_0;//内存数据输出 指令寄存器输入 程序计数允许
    all_command[9'b11_1111_010]<=17'b1000_0000_0000_0000_0;//停机
    all_command[9'b11_1111_011]<=17'b0000_0000_0000_0000_0;
    all_command[9'b11_1111_100]<=17'b0000_0000_0000_0000_0;
    all_command[9'b11_1111_101]<=17'b0000_0000_0000_0000_0;
    all_command[9'b11_1111_110]<=17'b0000_0000_0000_0000_0;
    all_command[9'b11_1111_111]<=17'b0000_0000_0000_0000_0;    
end
endmodule